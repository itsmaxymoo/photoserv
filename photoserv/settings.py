"""
Django settings for photoserv project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# --- ENV settings
SECRET_KEY = os.environ.get("APP_KEY")
DEBUG = (os.environ.get("DEBUG_MODE", "false").strip().lower() == "true")

# --- Application definition

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    "core",
    "api_key",
    "public_rest_api",
    "iam",

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "django_tables2",
    "crispy_forms",
    "crispy_daisyui",

    "rest_framework",

    'mozilla_django_oidc'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'mozilla_django_oidc.middleware.SessionRefresh',
    "photoserv.middleware.LoginRequiredMiddleware",
]

ROOT_URLCONF = 'photoserv.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'photoserv.context.global_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'photoserv.wsgi.application'

# Templating Plugin Config
DJANGO_TABLES2_TABLE_ATTRS = {
    "class": "table table-zebra"
}

# Crispy Forms Config
CRISPY_ALLOWED_TEMPLATE_PACKS = "daisyui"
CRISPY_TEMPLATE_PACK = "daisyui"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# --- Celery Configuration ---
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_TASK_ALWAYS_EAGER = DEBUG


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_ROOT = ''
STATIC_URL = '/static/'
STATICFILES_DIRS = ('static',)

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- REST Framework Configuration ---

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'api_key.permissions.HasAPIKey'
    ]
}

# --- IAM Config

AUTH_USER_MODEL = "iam.User"
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/photos'
LOGOUT_REDIRECT_URL = '/login/'

SIMPLE_AUTH = (os.environ.get("SIMPLE_AUTH", "false").lower().strip() == "true")

OIDC_NAME = os.environ.get("OIDC_NAME", "Single Sign On")
OIDC_RP_CLIENT_ID = os.environ.get("OIDC_CLIENT_ID")
OIDC_RP_CLIENT_SECRET = os.environ.get("OIDC_CLIENT_SECRET")

OIDC_OP_AUTHORIZATION_ENDPOINT = os.environ.get("OIDC_AUTHORIZATION_ENDPOINT")
OIDC_OP_TOKEN_ENDPOINT = os.environ.get("OIDC_TOKEN_ENDPOINT")
OIDC_OP_USER_ENDPOINT = os.environ.get("OIDC_USER_ENDPOINT")
OIDC_OP_JWKS_ENDPOINT = os.environ.get("OIDC_JWKS_ENDPOINT")
OIDC_RP_SIGN_ALGO = os.environ.get("OIDC_SIGN_ALGO", "RS256")
OIDC_RP_SCOPES = "openid email profile"

OIDC_ENABLED = all([
    OIDC_RP_CLIENT_ID,
    OIDC_RP_CLIENT_SECRET,
    OIDC_OP_AUTHORIZATION_ENDPOINT,
    OIDC_OP_TOKEN_ENDPOINT,
    OIDC_OP_USER_ENDPOINT,
    OIDC_OP_JWKS_ENDPOINT,
])

AUTH_ENABLED = SIMPLE_AUTH or OIDC_ENABLED

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'iam.auth.OIDCAuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
]
